// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// memcached_connect
List memcached_connect(std::string host, int port);
RcppExport SEXP _rlibmc_memcached_connect(SEXP hostSEXP, SEXP portSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    rcpp_result_gen = Rcpp::wrap(memcached_connect(host, port));
    return rcpp_result_gen;
END_RCPP
}
// memcached_set_value
bool memcached_set_value(SEXP conn, std::string key, std::string value, int expiration);
RcppExport SEXP _rlibmc_memcached_set_value(SEXP connSEXP, SEXP keySEXP, SEXP valueSEXP, SEXP expirationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type expiration(expirationSEXP);
    rcpp_result_gen = Rcpp::wrap(memcached_set_value(conn, key, value, expiration));
    return rcpp_result_gen;
END_RCPP
}
// memcached_get_value
std::string memcached_get_value(SEXP conn, std::string key);
RcppExport SEXP _rlibmc_memcached_get_value(SEXP connSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(memcached_get_value(conn, key));
    return rcpp_result_gen;
END_RCPP
}
// memcached_delete_key
bool memcached_delete_key(SEXP conn, std::string key);
RcppExport SEXP _rlibmc_memcached_delete_key(SEXP connSEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    Rcpp::traits::input_parameter< std::string >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(memcached_delete_key(conn, key));
    return rcpp_result_gen;
END_RCPP
}
// memcached_disconnect
void memcached_disconnect(SEXP conn);
RcppExport SEXP _rlibmc_memcached_disconnect(SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    memcached_disconnect(conn);
    return R_NilValue;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_MemcachedModule();

static const R_CallMethodDef CallEntries[] = {
    {"_rlibmc_memcached_connect", (DL_FUNC) &_rlibmc_memcached_connect, 2},
    {"_rlibmc_memcached_set_value", (DL_FUNC) &_rlibmc_memcached_set_value, 4},
    {"_rlibmc_memcached_get_value", (DL_FUNC) &_rlibmc_memcached_get_value, 2},
    {"_rlibmc_memcached_delete_key", (DL_FUNC) &_rlibmc_memcached_delete_key, 2},
    {"_rlibmc_memcached_disconnect", (DL_FUNC) &_rlibmc_memcached_disconnect, 1},
    {"_rcpp_module_boot_MemcachedModule", (DL_FUNC) &_rcpp_module_boot_MemcachedModule, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_rlibmc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
} 